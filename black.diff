--- cogs/settings.py	2025-09-24 11:13:18.294909 +0000
+++ cogs/settings.py	2025-09-24 11:30:42.329084 +0000
@@ -4,23 +4,26 @@
 
 from cogs import config as cfg
 
 Cog = commands.Cog
 
+
 class InvalidSettingError(Exception):
     pass
+
 
 class InvalidValueError(Exception):
     pass
 
-async def get_setting(ctx, setting: str, can_auto = False):
+
+async def get_setting(ctx, setting: str, can_auto=False):
     if setting not in cfg.Config.config["settings"]:
         raise InvalidSettingError
     cursor = cfg.db.cursor()
     cursor.execute(
         "SELECT * FROM user_settings WHERE userid = ? AND setting = ? LIMIT 1",
-        (ctx.author.id, setting)
+        (ctx.author.id, setting),
     )
     result = cursor.fetchone()
     if result is None:
         # auto
         if can_auto:
@@ -29,83 +32,90 @@
             return cfg.Config.config[setting][0]
     else:
         # not auto
         return result[2]
 
+
 async def set_setting(ctx, setting: str, value: str):
     if setting not in cfg.Config.config["settings"]:
         raise InvalidSettingError
     cursor = cfg.db.cursor()
     if value == "auto":
         cursor.execute(
             "DELETE FROM user_settings WHERE userid = ? AND setting = ?",
-            (ctx.author.id, setting)
+            (ctx.author.id, setting),
         )
     elif value in cfg.Config.config[setting]:
         cursor.execute(
             "INSERT OR REPLACE INTO user_settings (userid, setting, value) VALUES (?, ?, ?)",
-            (ctx.author.id, setting, value)
+            (ctx.author.id, setting, value),
         )
     else:
         raise InvalidValueError
 
+
 class Settings(Cog):
     def __init__(self, bot: commands.Bot):
         self.bot = bot
-    
+
     async def get_setting_wrapper(self, ctx, setting: str):
         try:
             value = await get_setting(ctx, setting, True)
-            if value == 'auto':
+            if value == "auto":
                 await ctx.send(
                     f"<@{ctx.author.id}> Setting `{setting}` is currently `auto`. "
                     f"In the current server configuration, this is equivalent to `{cfg.Config.config[setting][0]}`."
                 )
             else:
-                await ctx.send(f"<@{ctx.author.id}> Setting `{setting}` is currently `{value}`.")
+                await ctx.send(
+                    f"<@{ctx.author.id}> Setting `{setting}` is currently `{value}`."
+                )
         except InvalidSettingError:
             await ctx.send(f"<@{ctx.author.id}> `{setting}` is not a valid setting!")
         except Exception as e:
             print(f"Failed to get user preferences: {e}")
             await ctx.send("Failed to get user preferences >:3")
-    
+
     async def set_setting_wrapper(self, ctx, setting: str, value: str):
         try:
             await set_setting(ctx, setting, value)
             if value == "auto":
                 await ctx.send(
                     f"<@{ctx.author.id}> Setting `{setting}` has been set to `auto`. "
                     f"In the current server configuration, this is equivalent to `{cfg.Config.config[setting][0]}`."
                 )
             else:
-                await ctx.send(f"<@{ctx.author.id}> Setting `{setting}` has been set to `{value}`.")
+                await ctx.send(
+                    f"<@{ctx.author.id}> Setting `{setting}` has been set to `{value}`."
+                )
         except InvalidValueError:
             await ctx.send(
                 f"<@{ctx.author.id}> `{value}` is not a valid value for setting `{setting}`! "
                 f"Valid values: {'`' + '`, `'.join(cfg.Config.config[setting]) + '`'}"
             )
         except InvalidSettingError:
             await ctx.send(f"<@{ctx.author.id}> `{setting}` is not a valid setting!")
         except Exception as e:
             print(f"Failed to set user preferences: {e}")
             await ctx.send("Failed to set user preferences >:3")
-    
+
     async def display_settings(self, ctx):
         output = "# Your settings:\n```\n"
         for setting in cfg.Config.config["settings"]:
             value = await get_setting(ctx, setting, True)
             output += f"{setting}: {value}\n"
         output += "```"
         await ctx.send(output)
-    
+
     @commands.command(aliases=["s"], brief="Manages user preferences.")
     async def settings(self, ctx, setting: str = "", value: str = ""):
         if setting:
             if not value:
                 await self.get_setting_wrapper(ctx, setting)
             else:
                 await self.set_setting_wrapper(ctx, setting, value)
         else:
             await self.display_settings(ctx)
 
+
 async def setup(bot):
     await bot.add_cog(Settings(bot))
--- modsbot.py	2025-09-24 11:26:06.151486 +0000
+++ modsbot.py	2025-09-24 11:30:42.433660 +0000
@@ -116,11 +116,13 @@
                 await self.load_extension(cog)
             except Exception:
                 self.logger.exception(f"Failed to load cog {cog}.")
             else:
                 delta = datetime.now() - now
-                self.logger.info(f"Loaded cog {cog:<20} in {int(delta.total_seconds() * 1e3) / 1e3:.3f} seconds.")
+                self.logger.info(
+                    f"Loaded cog {cog:<20} in {int(delta.total_seconds() * 1e3) / 1e3:.3f} seconds."
+                )
 
         MODS_SERVER = discord.Object(id=self.config["mods_guild"])
         self.tree.copy_global_to(guild=MODS_SERVER)
         await self.tree.sync(guild=MODS_SERVER)
         await self.tree.sync()
--- utils/potd_utils.py	2025-09-24 11:16:14.712994 +0000
+++ utils/potd_utils.py	2025-09-24 11:30:42.553112 +0000
@@ -177,18 +177,22 @@
                 if "s" not in flag:
                     output = (
                         "<@"
                         + str(cfg.Config.config["paradox_id"])
                         + ">\n"
-                        + texify_potd(potd_row, await settings.get_setting(ctx, 'indents'))
+                        + texify_potd(
+                            potd_row, await settings.get_setting(ctx, "indents")
+                        )
                     )
                 else:
                     output = (
                         "<@"
                         + str(cfg.Config.config["paradox_id"])
                         + ">texsp\n||"
-                        + texify_potd(potd_row, await settings.get_setting(ctx, 'indents'))
+                        + texify_potd(
+                            potd_row, await settings.get_setting(ctx, "indents")
+                        )
                         + "||"
                     )
                 await ctx.send(output, delete_after=5)
         except IndexError:
             await ctx.send(f"There is no potd for day {number}. ")
@@ -211,13 +215,16 @@
         + "} --- "
         + str(potd_row[cfg.Config.config["potd_sheet_day_col"]])
         + " "
         + str(potd_row[cfg.Config.config["potd_sheet_date_col"]])
         + "\\vspace{11pt}\\\\"
-        + ("\\setlength\\parindent{1.5em}" if indents == "on"
-           # from https://web.evanchen.cc/faq-latex.html#L-18
-           else "\\setlength{\\parskip}{1.3ex}\\setlength{\\parindent}{0pt}")
+        + (
+            "\\setlength\\parindent{1.5em}"
+            if indents == "on"
+            # from https://web.evanchen.cc/faq-latex.html#L-18
+            else "\\setlength{\\parskip}{1.3ex}\\setlength{\\parindent}{0pt}"
+        )
         + str(potd_row[cfg.Config.config["potd_sheet_statement_col"]])
         + "```"
     )
 
 
